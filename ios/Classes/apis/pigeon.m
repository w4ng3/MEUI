// Autogenerated from Pigeon (v7.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[ error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null] ];
  }
  return @[ result ?: [NSNull null]  ];
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface AlertDialogConfig ()
+ (AlertDialogConfig *)fromList:(NSArray *)list;
+ (nullable AlertDialogConfig *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end


@implementation AlertDialogConfig
+ (instancetype)makeWithTitle:(nullable NSString *)title
    content:(nullable NSString *)content
    confirmText:(nullable NSString *)confirmText
    cancelText:(nullable NSString *)cancelText {
  AlertDialogConfig* pigeonResult = [[AlertDialogConfig alloc] init];
  pigeonResult.title = title;
  pigeonResult.content = content;
  pigeonResult.confirmText = confirmText;
  pigeonResult.cancelText = cancelText;
  return pigeonResult;
}
+ (AlertDialogConfig *)fromList:(NSArray *)list {
  AlertDialogConfig *pigeonResult = [[AlertDialogConfig alloc] init];
  pigeonResult.title = GetNullableObjectAtIndex(list, 0);
  pigeonResult.content = GetNullableObjectAtIndex(list, 1);
  pigeonResult.confirmText = GetNullableObjectAtIndex(list, 2);
  pigeonResult.cancelText = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable AlertDialogConfig *)nullableFromList:(NSArray *)list { return (list) ? [AlertDialogConfig fromList:list] : nil; }
- (NSArray *)toList {
  return @[
    (self.title ?: [NSNull null]),
    (self.content ?: [NSNull null]),
    (self.confirmText ?: [NSNull null]),
    (self.cancelText ?: [NSNull null]),
  ];
}
@end

NSObject<FlutterMessageCodec> *AlertDialogHostAPIGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void AlertDialogHostAPISetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AlertDialogHostAPI> *api) {
    /// 点击确定
{
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AlertDialogHostAPI.onClickConfirm"
        binaryMessenger:binaryMessenger
        codec:AlertDialogHostAPIGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onClickConfirmWithError:)], @"AlertDialogHostAPI api (%@) doesn't respond to @selector(onClickConfirmWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api onClickConfirmWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
    /// 点击取消
{
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AlertDialogHostAPI.onClickCancel"
        binaryMessenger:binaryMessenger
        codec:AlertDialogHostAPIGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onClickCancelWithError:)], @"AlertDialogHostAPI api (%@) doesn't respond to @selector(onClickCancelWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api onClickCancelWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface AlertDialogFlutterAPICodecReader : FlutterStandardReader
@end
@implementation AlertDialogFlutterAPICodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [AlertDialogConfig fromList:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface AlertDialogFlutterAPICodecWriter : FlutterStandardWriter
@end
@implementation AlertDialogFlutterAPICodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[AlertDialogConfig class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface AlertDialogFlutterAPICodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation AlertDialogFlutterAPICodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[AlertDialogFlutterAPICodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[AlertDialogFlutterAPICodecReader alloc] initWithData:data];
}
@end


NSObject<FlutterMessageCodec> *AlertDialogFlutterAPIGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    AlertDialogFlutterAPICodecReaderWriter *readerWriter = [[AlertDialogFlutterAPICodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface AlertDialogFlutterAPI ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation AlertDialogFlutterAPI

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)configConfig:(AlertDialogConfig *)arg_config completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.AlertDialogFlutterAPI.config"
      binaryMessenger:self.binaryMessenger
      codec:AlertDialogFlutterAPIGetCodec()];
  [channel sendMessage:@[arg_config ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

